// prisma/schema.prisma (최종 수정 버전)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Provider {
  EMAIL
  KAKAO
  GOOGLE
}

enum Role {
  USER
  ADMIN
}

/// -----------------------------------------------------------
/// 1. 사용자 관련 엔티티
/// -----------------------------------------------------------

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  email                String    @unique
  password             String
  resetPasswordToken        String?   
  resetPasswordTokenExpires DateTime?
  nickname             String    @unique
  profileImageUrl      String?
  role                 Role      @default(USER)
  provider             String? // 'EMAIL', 'GOOGLE', 'KAKAO'
  providerId           String? // 소셜 로그인 제공자의 고유 ID
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt
  
  temperature          Int       @default(61) // 관계 온도
  fcmToken             String?   // FCM 토큰

  schedules            Schedule[]

  // 진단 결과와의 관계
  diagnosisResults     DiagnosisResult[]

  // 소속된 커플 정보
  coupleId             String?   @db.ObjectId
  couple               Couple?   @relation(fields: [coupleId], references: [id])
  
  // 파트너 연결 (수정)
  partnerId            String?   
  partner              User?     @relation("UserPartner", fields: [partnerId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  partnerOf            User[]    @relation("UserPartner")

  // 작성한 데이터
  sentMessages         Message[] @relation("SentMessages")
  receivedMessages     Message[] @relation("ReceivedMessages")
  sentEmotionCards     EmotionCard[] @relation("SentEmotionCards")
  receivedEmotionCards EmotionCard[] @relation("ReceivedEmotionCards")
  posts                CommunityPost[]
  comments             Comment[]
  emotionJournals      EmotionJournal[]
  votes                CommunityPostVote[]
  surveys              RelationshipSurvey[]
  diaries              Diary[] // 감정일기 1:N 관계 추가
  contentLikes         ContentLike[]
  contentBookmarks     ContentBookmark[]

  // 파트너 초대 관련 관계 추가
  sentInvites     PartnerInvite[] @relation("SentInvites")
  receivedInvites PartnerInvite[] @relation("ReceivedInvites")

  // 알림
  notifications   Notification[]
}

model Notification {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  message   String // "새로운 챌린지가 시작되었어요."
  url       String? // 클릭 시 이동할 경로 (예: /challenge)
  isRead    Boolean  @default(false)
  type      String // "CHALLENGE_STARTED", "PARTNER_CONNECTED" 등
  createdAt DateTime @default(now())

  // 관계
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model DiagnosisResult {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  score      Int      // 최종 점수
  resultType String   // 결과 유형 (e.g., "안정기", "위험기")
  diagnosisType String // 진단 종류 (e.g., "MARRIAGE_SATISFACTION", "SELF_UNDERSTANDING")
  createdAt  DateTime @default(now())

  // 연결 정보
  userId     String?  @db.ObjectId // 실제 User ID (회원가입 후 연결)
  user       User?    @relation(fields: [userId], references: [id])
}

model Couple {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  status         CoupleStatus @default(ACTIVE)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  members        User[]
  challenges     Challenge[]
  emotionCards   EmotionCard[]
  partnerInvites PartnerInvite[] // 파트너 초대 정보와 1:N 관계
  reports        Report[]
}

model PartnerInvite {
  id          String         @id @default(auto()) @map("_id") @db.ObjectId
  code        String         @unique // 초대 코드
  status      InviteStatus   @default(PENDING)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  inviterId   String         @db.ObjectId
  inviter     User           @relation("SentInvites", fields: [inviterId], references: [id])
  
  inviteeId   String?        @db.ObjectId // 초대 코드 입력 시점에 설정
  invitee     User?          @relation("ReceivedInvites", fields: [inviteeId], references: [id])
  
  coupleId    String?        @db.ObjectId // 초대 수락 시점에 생성된 커플 ID
  couple      Couple?        @relation(fields: [coupleId], references: [id])

  @@index([inviterId])
  @@index([inviteeId])
}

enum CoupleStatus {
  PENDING
  ACTIVE
  INACTIVE
}

enum InviteStatus {
  PENDING    // 초대 코드 생성됨
  RESPONDED  // 초대 코드 입력됨
  CONFIRMED  // 초대 수락됨
  REJECTED   // 초대 거절됨
  EXPIRED    // 초대 만료됨
}

/// -----------------------------------------------------------
/// 2. 공유 기능 관련 엔티티
/// -----------------------------------------------------------

enum ChallengeCategory {
  DAILY_SHARE    // 일상 공유
  TOGETHER_ACT   // 함께하기
  EMOTION_EXPR   // 감정표현
  MEMORY_BUILD   // 기억쌓기
  SELF_CARE      // 마음 돌보기
  GROW_TOGETHER  // 함께성장
}

enum ChallengeStatus {
  IN_PROGRESS
  COMPLETED
  FAILED
}

model ChallengeTemplate {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    ChallengeCategory
  frequency   Int      // 주 몇회 수행해야 하는지 (예: 주3회 = 3)
  isOneTime   Boolean  // 1회성 챌린지인지 여부
  points      Int      // 달성 시 얻는 점수
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([category])
}

model Challenge {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  category    ChallengeCategory
  frequency   Int      // 주 몇회 수행해야 하는지 (예: 주3회 = 3)
  isOneTime   Boolean  // 1회성 챌린지인지 여부
  points      Int      // 달성 시 얻는 점수
  startDate   DateTime
  endDate     DateTime
  status      ChallengeStatus @default(IN_PROGRESS)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // 챌린지 진행 상태
  isCompletedByMember1 Boolean  @default(false)
  isCompletedByMember2 Boolean  @default(false)
  completedAt          DateTime?

  // 관계
  coupleId    String   @db.ObjectId
  couple      Couple   @relation(fields: [coupleId], references: [id])

  @@index([coupleId])
  @@index([status])
  @@index([category])
}

model EmotionCard {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  message      String
  aiSuggestion String?
  isRead       Boolean  @default(false)
  emoji        String?
  createdAt    DateTime @default(now())

  senderId     String   @db.ObjectId
  sender       User     @relation("SentEmotionCards", fields: [senderId], references: [id])

  receiverId   String   @db.ObjectId
  receiver     User     @relation("ReceivedEmotionCards", fields: [receiverId], references: [id])

  coupleId     String   @db.ObjectId
  couple       Couple   @relation(fields: [coupleId], references: [id])
}

model RelationshipSurvey {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  surveyDate   DateTime @default(now())
  createdAt    DateTime @default(now())

  respondentId String   @db.ObjectId
  respondent   User     @relation(fields: [respondentId], references: [id])
}

model Report {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  weekStartDate              DateTime
  overallScore               Float    @default(0)
  reason                     String   @default("") // 리포트 요약 (e.g., "감정 카드 교환으로 온도가 상승했어요")
  cardsSentCount             Int      @default(0)
  challengesCompletedCount   Int      @default(0)
  challengesFailedCount      Int      @default(0) // 챌린지 실패 횟수
  expertSolutionsCount       Int      @default(0)
  marriageDiagnosisCount     Int      @default(0)
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime @updatedAt

  coupleId                   String   @db.ObjectId
  couple                     Couple   @relation(fields: [coupleId], references: [id])
  
  @@unique([coupleId, weekStartDate])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

/// -----------------------------------------------------------
/// 3. 개인 및 커뮤니티 기능 관련 엔티티
/// -----------------------------------------------------------

model Category {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @unique
  isPollCategory Boolean         @default(false)
  posts          CommunityPost[]
}

model Content {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  type      ContentType @default(ARTICLE)
  isPremium Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  likes     ContentLike[]
  bookmarks ContentBookmark[]
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  PREMIUM
}

model EmotionJournal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  content     String
  isAnonymous Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
}

model CommunityPost {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  content       String
  imageUrl      String?
  viewCount     Int       @default(0)
  tags          String[]
  poll          Json?
  isAnonymous   Boolean   @default(false)
  agreeVotes    Int       @default(0)
  disagreeVotes Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  authorId      String    @db.ObjectId
  author        User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId    String    @db.ObjectId
  category      Category  @relation(fields: [categoryId], references: [id])
  comments      Comment[]
  votes         CommunityPostVote[]

  @@index([authorId])
  @@index([categoryId])
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  communityPostId    String?  @db.ObjectId
  communityPost      CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  
  journalId String?  @db.ObjectId
  journal   EmotionJournal? @relation(fields: [journalId], references: [id])

  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToParent")
}

model CommunityPostVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  option    String
  createdAt DateTime @default(now())

  postId    String   @db.ObjectId
  post      CommunityPost @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Diary {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  date        String
  emotion     Json
  triggers    Json
  comment     String
  palette     Json
  randomInfo  Json
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Schedule {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  date      String
  content   String
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ContentLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
}

model ContentBookmark {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  contentId String   @db.ObjectId
  content   Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)

  @@unique([userId, contentId])
}