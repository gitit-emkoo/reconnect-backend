// prisma/schema.prisma (최종 수정 버전)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Provider {
  EMAIL
  KAKAO
  GOOGLE
}

/// -----------------------------------------------------------
/// 1. 사용자 관련 엔티티
/// -----------------------------------------------------------

model User {
  id                   String    @id @default(auto()) @map("_id") @db.ObjectId
  email                String    @unique
  password             String
  nickname             String    @unique
  profileImageUrl      String?
  provider             String? // 'EMAIL', 'GOOGLE', 'KAKAO'
  providerId           String? // 소셜 로그인 제공자의 고유 ID
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // 소속된 커플 정보
  coupleId             String?   @db.ObjectId
  couple               Couple?   @relation(fields: [coupleId], references: [id])
  
  // 작성한 데이터
  sentMessages         Message[] @relation("SentMessages")
  receivedMessages     Message[] @relation("ReceivedMessages")
  sentEmotionCards     EmotionCard[] @relation("SentEmotionCards")
  receivedEmotionCards EmotionCard[] @relation("ReceivedEmotionCards")
  posts                CommunityPost[]
  comments             Comment[]
  emotionJournals      EmotionJournal[]
  votes                CommunityPostVote[]
  surveys              RelationshipSurvey[]
  reportsAsReporter    Report[] @relation("ReportsByReporter")
  reportsAsReported    Report[] @relation("ReportsOnReported")
}

model Couple {
  id             String       @id @default(auto()) @map("_id") @db.ObjectId
  invitationCode String       @unique
  status         CoupleStatus @default(PENDING)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  members      User[]
  challenges   Challenge[]
  reports      Report[]
  emotionCards EmotionCard[]
}

enum CoupleStatus {
  PENDING
  ACTIVE
  INACTIVE
}

/// -----------------------------------------------------------
/// 2. 공유 기능 관련 엔티티
/// -----------------------------------------------------------

model Challenge {
  id                   String   @id @default(auto()) @map("_id") @db.ObjectId
  title                String
  description          String
  recommendationDate   DateTime
  isCompletedByMember1 Boolean  @default(false)
  isCompletedByMember2 Boolean  @default(false)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  coupleId             String   @db.ObjectId
  couple               Couple   @relation(fields: [coupleId], references: [id])
}

model EmotionCard {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  message      String
  aiSuggestion String?
  isRead       Boolean  @default(false)
  emoji        String?
  createdAt    DateTime @default(now())

  senderId     String   @db.ObjectId
  sender       User     @relation("SentEmotionCards", fields: [senderId], references: [id])

  receiverId   String   @db.ObjectId
  receiver     User     @relation("ReceivedEmotionCards", fields: [receiverId], references: [id])

  coupleId     String   @db.ObjectId
  couple       Couple   @relation(fields: [coupleId], references: [id])
}

model RelationshipSurvey {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  score        Int
  surveyDate   DateTime @default(now())
  createdAt    DateTime @default(now())

  respondentId String   @db.ObjectId
  respondent   User     @relation(fields: [respondentId], references: [id])
}

model Report {
  id                       String   @id @default(auto()) @map("_id") @db.ObjectId
  weekStartDate            DateTime
  overallScore             Int
  cardsSentCount           Int
  challengesCompletedCount Int
  reason                   String
  createdAt                DateTime @default(now())
  updatedAt                DateTime @updatedAt

  coupleId                 String   @db.ObjectId
  couple                   Couple   @relation(fields: [coupleId], references: [id])
  
  reporterId               String   @db.ObjectId
  reporter                 User     @relation("ReportsByReporter", fields: [reporterId], references: [id])

  reportedId               String   @db.ObjectId
  reported                 User     @relation("ReportsOnReported", fields: [reportedId], references: [id])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  content    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  senderId   String   @db.ObjectId
  sender     User     @relation("SentMessages", fields: [senderId], references: [id])

  receiverId String   @db.ObjectId
  receiver   User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
}

/// -----------------------------------------------------------
/// 3. 개인 및 커뮤니티 기능 관련 엔티티
/// -----------------------------------------------------------

model Category {
  id             String          @id @default(auto()) @map("_id") @db.ObjectId
  name           String          @unique
  isPollCategory Boolean         @default(false)
  posts          CommunityPost[]
}

model Content {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  body      String
  type      ContentType @default(ARTICLE)
  isPremium Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  PREMIUM
}

model EmotionJournal {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String?
  content     String
  isAnonymous Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  authorId    String    @db.ObjectId
  author      User      @relation(fields: [authorId], references: [id])
  comments    Comment[]
}

model CommunityPost {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  title      String
  content    String
  imageUrl   String?
  viewCount  Int       @default(0)
  tags       String[]
  poll       Json?
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  authorId   String    @db.ObjectId
  author     User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId String    @db.ObjectId
  category   Category  @relation(fields: [categoryId], references: [id])
  comments   Comment[]
  votes      CommunityPostVote[]
}

model Comment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  authorId  String   @db.ObjectId
  author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)

  communityPostId    String?  @db.ObjectId
  communityPost      CommunityPost? @relation(fields: [communityPostId], references: [id], onDelete: Cascade)
  
  journalId String?  @db.ObjectId
  journal   EmotionJournal? @relation(fields: [journalId], references: [id])

  parentId  String?  @db.ObjectId
  parent    Comment? @relation("CommentToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies   Comment[] @relation("CommentToParent")
}

model CommunityPostVote {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  option    String
  createdAt DateTime @default(now())

  postId    String   @db.ObjectId
  post      CommunityPost @relation(fields: [postId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])

  @@unique([postId, userId])
}