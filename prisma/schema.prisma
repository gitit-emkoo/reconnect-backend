// prisma/schema.prisma (최종 수정 버전)

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Provider {
  EMAIL
  KAKAO
  GOOGLE
}

/// -----------------------------------------------------------
/// 1. 사용자 관련 엔티티
/// -----------------------------------------------------------

model User {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  email                   String    @unique
  password                String
  nickname                String    @unique
  provider                String?
  providerId              String?
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  // 관계 필드
  coupleId                String?   @db.ObjectId
  couple                  Couple?   @relation("UserToCouple", fields: [coupleId], references: [id])
  
  member1OfCouples        Couple[]  @relation("CoupleMember1")
  member2OfCouples        Couple[]  @relation("CoupleMember2")

  posts                   CommunityPost[]
  comments                Comment[]
  sentReports             Report[]  @relation("sentReports")
  receivedReports         Report[]  @relation("receivedReports")
  
  emotionCardsSent        EmotionCard[] @relation("Sender")
  emotionCardsReceived    EmotionCard[] @relation("Receiver")
  
  relationshipSurveys     RelationshipSurvey[] @relation("SurveyRespondent")
  emotionJournals         EmotionJournal[]
}

model Couple {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  member1Id               String    @unique @db.ObjectId
  member2Id               String?   @unique @db.ObjectId
  invitationCode          String    @unique
  status                  CoupleStatus @default(PENDING)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  member1                 User      @relation("CoupleMember1", fields: [member1Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  member2                 User?     @relation("CoupleMember2", fields: [member2Id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  
  usersInCouple           User[]    @relation("UserToCouple")

  challenges              Challenge[]
  emotionCards            EmotionCard[]
  relationshipSurveys     RelationshipSurvey[]
  reports                 Report[]
}

enum CoupleStatus {
  PENDING
  ACTIVE
  INACTIVE
}

/// -----------------------------------------------------------
/// 2. 공유 기능 관련 엔티티 (부부가 함께 보는 기능)
/// -----------------------------------------------------------

model Challenge {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  description             String
  recommendationDate      DateTime
  isCompletedByMember1    Boolean   @default(false)
  isCompletedByMember2    Boolean   @default(false)

  coupleId                String    @db.ObjectId
  couple                  Couple    @relation(fields: [coupleId], references: [id])

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model EmotionCard {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  message                 String
  aiSuggestion            String?
  isRead                  Boolean   @default(false)
  emoji                   String?

  senderId                String    @db.ObjectId
  sender                  User      @relation("Sender", fields: [senderId], references: [id])

  receiverId              String    @db.ObjectId
  receiver                User      @relation("Receiver", fields: [receiverId], references: [id])

  coupleId                String    @db.ObjectId
  couple                  Couple    @relation(fields: [coupleId], references: [id])

  createdAt               DateTime  @default(now())
}

model RelationshipSurvey {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  score                   Int
  surveyDate              DateTime  @default(now())

  respondentId            String    @db.ObjectId
  respondent              User      @relation("SurveyRespondent", fields: [respondentId], references: [id])

  coupleId                String    @db.ObjectId
  couple                  Couple    @relation(fields: [coupleId], references: [id])

  createdAt               DateTime  @default(now())
}

model Report {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  weekStartDate           DateTime
  overallScore            Int
  cardsSentCount          Int
  cardsReceivedCount      Int
  challengesCompletedCount Int

  coupleId                String    @db.ObjectId
  couple                  Couple    @relation(fields: [coupleId], references: [id])

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt

  reporterId              String    @db.ObjectId
  reporter                User      @relation("sentReports", fields: [reporterId], references: [id])

  reportedId              String    @db.ObjectId
  reported                User      @relation("receivedReports", fields: [reportedId], references: [id])

  reason                  String
}

/// -----------------------------------------------------------
/// 3. 개인 및 커뮤니티 기능 관련 엔티티 (배우자와 공유하지 않는 기능)
/// -----------------------------------------------------------

model Category {
  id    String @id @default(auto()) @map("_id") @db.ObjectId
  name  String @unique
  posts CommunityPost[]
}

model Content {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  body                    String
  type                    ContentType @default(ARTICLE)
  isPremium               Boolean   @default(false)
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

enum ContentType {
  ARTICLE
  VIDEO
  AUDIO
  PREMIUM
}

model EmotionJournal {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String?
  content                 String
  isAnonymous             Boolean   @default(false)
  authorId                String    @db.ObjectId
  author                  User      @relation(fields: [authorId], references: [id])
  comments                Comment[] @relation("EmotionJournalComments")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model CommunityPost {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  title                   String
  content                 String
  imageUrl                String?
  authorId                String    @db.ObjectId
  author                  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)
  categoryId              String    @db.ObjectId
  category                Category  @relation(fields: [categoryId], references: [id])
  comments                Comment[] @relation("CommunityPostComments")
  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
  viewCount               Int       @default(0)
  tags                    String[]
  poll                    Json?    // 찬반토론(투표) 데이터, question/options 등
}

model Comment {
  id                      String    @id @default(auto()) @map("_id") @db.ObjectId
  content                 String
  authorId                String    @db.ObjectId
  author                  User      @relation(fields: [authorId], references: [id], onDelete: Cascade)

  emotionJournalId        String?   @db.ObjectId
  emotionJournal          EmotionJournal? @relation("EmotionJournalComments", fields: [emotionJournalId], references: [id])

  communityPostId         String?   @db.ObjectId
  communityPost           CommunityPost? @relation("CommunityPostComments", fields: [communityPostId], references: [id], onDelete: Cascade)

  parentId                String?   @db.ObjectId
  parent                  Comment?  @relation("CommentToParent", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  replies                 Comment[] @relation("CommentToParent")

  createdAt               DateTime  @default(now())
  updatedAt               DateTime  @updatedAt
}

model CommunityPostVote {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  postId     String   @db.ObjectId
  userId     String   @db.ObjectId
  option     String   // 찬성/반대 등
  createdAt  DateTime @default(now())

  post       CommunityPost @relation(fields: [postId], references: [id])
  user       User          @relation(fields: [userId], references: [id])

  @@unique([postId, userId]) // 한 게시글에 한 번만 투표
}